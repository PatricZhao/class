
R version 2.9.1 RC (2009-06-18 r48797)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### * <HEADER>
> ###
> attach(NULL, name = "CheckExEnv")
> assign("nameEx",
+        local({
+ 	   s <- "__{must remake R-ex/*.R}__"
+            function(new) {
+                if(!missing(new)) s <<- new else s
+            }
+        }),
+        pos = "CheckExEnv")
> ## Add some hooks to label plot pages for base and grid graphics
> assign("base_plot_hook",
+        function() {
+            pp <- par(c("mfg","mfcol","oma","mar"))
+            if(all(pp$mfg[1:2] == c(1, pp$mfcol[2]))) {
+                outer <- (oma4 <- pp$oma[4]) > 0; mar4 <- pp$mar[4]
+                mtext(sprintf("help(\"%s\")", nameEx()), side = 4,
+                      line = if(outer)max(1, oma4 - 1) else min(1, mar4 - 1),
+                outer = outer, adj = 1, cex = .8, col = "orchid", las=3)
+            }
+        },
+        pos = "CheckExEnv")
> assign("grid_plot_hook",
+        function() {
+            grid::pushViewport(grid::viewport(width=grid::unit(1, "npc") -
+                               grid::unit(1, "lines"), x=0, just="left"))
+            grid::grid.text(sprintf("help(\"%s\")", nameEx()),
+                            x=grid::unit(1, "npc") + grid::unit(0.5, "lines"),
+                            y=grid::unit(0.8, "npc"), rot=90,
+                            gp=grid::gpar(col="orchid"))
+        },
+        pos = "CheckExEnv")
> setHook("plot.new",     get("base_plot_hook", pos = "CheckExEnv"))
> setHook("persp",        get("base_plot_hook", pos = "CheckExEnv"))
> setHook("grid.newpage", get("grid_plot_hook", pos = "CheckExEnv"))
> assign("cleanEx",
+        function(env = .GlobalEnv) {
+ 	   rm(list = ls(envir = env, all.names = TRUE), envir = env)
+            RNGkind("default", "default")
+ 	   set.seed(1)
+    	   options(warn = 1)
+ 	   .CheckExEnv <- as.environment("CheckExEnv")
+ 	   delayedAssign("T", stop("T used instead of TRUE"),
+ 		  assign.env = .CheckExEnv)
+ 	   delayedAssign("F", stop("F used instead of FALSE"),
+ 		  assign.env = .CheckExEnv)
+ 	   sch <- search()
+ 	   newitems <- sch[! sch %in% .oldSearch]
+ 	   for(item in rev(newitems))
+                eval(substitute(detach(item), list(item=item)))
+ 	   missitems <- .oldSearch[! .oldSearch %in% sch]
+ 	   if(length(missitems))
+ 	       warning("items ", paste(missitems, collapse=", "),
+ 		       " have been removed from the search path")
+        },
+        pos = "CheckExEnv")
> assign("ptime", proc.time(), pos = "CheckExEnv")
> ## at least one package changes these via ps.options(), so do this
> ## before loading the package.
> ## Use postscript as incomplete files may be viewable, unlike PDF.
> ## Choose a size that is close to on-screen devices, fix paper
> grDevices::ps.options(width = 7, height = 7, paper = "a4", reset = TRUE)
> grDevices::postscript("class-Ex.ps")
> 
> assign("par.postscript", graphics::par(no.readonly = TRUE), pos = "CheckExEnv")
> options(contrasts = c(unordered = "contr.treatment", ordered = "contr.poly"))
> options(warn = 1)
> library('class')
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> assign(".oldNS", loadedNamespaces(), pos = 'CheckExEnv')
> cleanEx(); nameEx("SOM")
> ### * SOM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SOM
> ### Title: Self-Organizing Maps: Online Algorithm
> ### Aliases: SOM
> ### Keywords: classif
> 
> ### ** Examples
> 
> require(graphics)
> data(crabs, package = "MASS")
> 
> lcrabs <- log(crabs[, 4:8])
> crabs.grp <- factor(c("B", "b", "O", "o")[rep(1:4, rep(50,4))])
> gr <- somgrid(topo = "hexagonal")
> crabs.som <- SOM(lcrabs, gr)
> plot(crabs.som)
> 
> ## 2-phase training
> crabs.som2 <- SOM(lcrabs, gr,
+     alpha = list(seq(0.05, 0, len = 1e4), seq(0.02, 0, len = 1e5)),
+     radii = list(seq(8, 1, len = 1e4), seq(4, 1, len = 1e5)))
> plot(crabs.som2)
> 
> 
> 
> cleanEx(); nameEx("batchSOM")
> ### * batchSOM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: batchSOM
> ### Title: Self-Organizing Maps: Batch Algorithm
> ### Aliases: batchSOM
> ### Keywords: classif
> 
> ### ** Examples
> 
> require(graphics)
> data(crabs, package = "MASS")
> 
> lcrabs <- log(crabs[, 4:8])
> crabs.grp <- factor(c("B", "b", "O", "o")[rep(1:4, rep(50,4))])
> gr <- somgrid(topo = "hexagonal")
> crabs.som <- batchSOM(lcrabs, gr, c(4, 4, 2, 2, 1, 1, 1, 0, 0))
> plot(crabs.som)
> 
> bins <- as.numeric(knn1(crabs.som$code, lcrabs, 0:47))
> plot(crabs.som$grid, type = "n")
> symbols(crabs.som$grid$pts[, 1], crabs.som$grid$pts[, 2],
+         circles = rep(0.4, 48), inches = FALSE, add = TRUE)
> text(crabs.som$grid$pts[bins, ] + rnorm(400, 0, 0.1),
+      as.character(crabs.grp))
> 
> 
> 
> cleanEx(); nameEx("condense")
> ### * condense
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: condense
> ### Title: Condense training set for k-NN classifier
> ### Aliases: condense
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> keep <- condense(train, cl)
[1] 20
[1] 20 44
[1] 20 44 65
[1] 20 44 65 74
[1] 20 28 44 65 74
[1] 20 28 44 65 73 74
[1] 20 28 44 65 73 74 75
[1] 20 28 44 48 65 73 74 75
[1] 20 28 44 46 48 65 73 74 75
 [1] 20 28 44 46 48 57 65 73 74 75
 [1] 20 28 35 44 46 48 57 65 73 74 75
 [1] 20 28 35 44 46 48 57 65 70 73 74 75
> knn(train[keep, , drop=FALSE], test, cl[keep])
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c v c c c c
[39] c c c c c c c c c c c c v v c v v v v v c v v v v c v v v v v v v v v v c
Levels: c s v
> keep2 <- reduce.nn(train, keep, cl)
> knn(train[keep2, , drop=FALSE], test, cl[keep2])
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c v c c c c
[39] c c c c c c c c c c c c v v c v v v v v c v v v v c v v v v v v v v v v c
Levels: c s v
> 
> 
> 
> cleanEx(); nameEx("knn")
> ### * knn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: knn
> ### Title: k-Nearest Neighbour Classification
> ### Aliases: knn
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> knn(train, test, cl, k = 3, prob=TRUE)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c v c c c c c v c c c c
[39] c c c c c c c c c c c c v c c v v v v v v v v v v c v v v v v v v v v v v
attr(,"prob")
 [1] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [8] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[15] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[22] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.6666667
[29] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.6666667 1.0000000
[36] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[43] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[50] 1.0000000 1.0000000 0.6666667 0.7500000 1.0000000 1.0000000 1.0000000
[57] 1.0000000 1.0000000 0.5000000 1.0000000 1.0000000 1.0000000 1.0000000
[64] 0.6666667 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[71] 1.0000000 0.6666667 1.0000000 1.0000000 0.6666667
Levels: c s v
> attributes(.Last.value)
$levels
[1] "c" "s" "v"

$class
[1] "factor"

$prob
 [1] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [8] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[15] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[22] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.6666667
[29] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.6666667 1.0000000
[36] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[43] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[50] 1.0000000 1.0000000 0.6666667 0.7500000 1.0000000 1.0000000 1.0000000
[57] 1.0000000 1.0000000 0.5000000 1.0000000 1.0000000 1.0000000 1.0000000
[64] 0.6666667 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[71] 1.0000000 0.6666667 1.0000000 1.0000000 0.6666667

> 
> 
> 
> cleanEx(); nameEx("knn.cv")
> ### * knn.cv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: knn.cv
> ### Title: k-Nearest Neighbour Cross-Validatory Classification
> ### Aliases: knn.cv
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[,,1], iris3[,,2], iris3[,,3])
> cl <- factor(c(rep("s",50), rep("c",50), rep("v",50)))
> knn.cv(train, cl, k = 3, prob = TRUE)
  [1] s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s s
 [38] s s s s s s s s s s s s s c c c c c c c c c c c c c c c c c c c c v c v c
 [75] c c c c c c c c c v c c c c c c c c c c c c c c c c v v v v v v c v v v v
[112] v v v v v v v v c v v v v v v v v v v v v v c v v v v v v v v v v v v v v
[149] v v
attr(,"prob")
  [1] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
  [8] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [15] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [22] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [29] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [36] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [43] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [50] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [57] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [64] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.6666667 1.0000000
 [71] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [78] 0.6666667 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [85] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [92] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [99] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[106] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.7500000 1.0000000
[113] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[120] 1.0000000 1.0000000 1.0000000 1.0000000 0.7500000 1.0000000 1.0000000
[127] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[134] 0.6666667 0.6666667 1.0000000 1.0000000 1.0000000 0.6666667 1.0000000
[141] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[148] 1.0000000 1.0000000 1.0000000
Levels: c s v
> attributes(.Last.value)
$levels
[1] "c" "s" "v"

$class
[1] "factor"

$prob
  [1] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
  [8] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [15] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [22] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [29] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [36] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [43] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [50] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [57] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [64] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.6666667 1.0000000
 [71] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [78] 0.6666667 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [85] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [92] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
 [99] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[106] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 0.7500000 1.0000000
[113] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[120] 1.0000000 1.0000000 1.0000000 1.0000000 0.7500000 1.0000000 1.0000000
[127] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[134] 0.6666667 0.6666667 1.0000000 1.0000000 1.0000000 0.6666667 1.0000000
[141] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000
[148] 1.0000000 1.0000000 1.0000000

> 
> 
> 
> cleanEx(); nameEx("knn1")
> ### * knn1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: knn1
> ### Title: 1-nearest neighbour classification
> ### Aliases: knn1
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> knn1(train, test, cl)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c v c c c c
[39] c c c c c c c c c c c c v v c v v v v v c v v v v c v v v v v v v v v v v
Levels: c s v
> 
> 
> 
> cleanEx(); nameEx("lvq1")
> ### * lvq1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lvq1
> ### Title: Learning Vector Quantization 1
> ### Aliases: lvq1
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> cd <- lvqinit(train, cl, 10)
> lvqtest(cd, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c v c v c v c c v v v v v v v v v v v v v v v v v v v v v v v v v
Levels: c s v
> cd0 <- olvq1(train, cl, cd)
> lvqtest(cd0, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c c c c c c c c v v v v v v v v v v v v v v v v v v v v v v v c v
Levels: c s v
> cd1 <- lvq1(train, cl, cd0)
> lvqtest(cd1, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c c c v c c c c v v v v v v v v v v v v v v v v v v v v v v v c v
Levels: c s v
> 
> 
> 
> cleanEx(); nameEx("lvq2")
> ### * lvq2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lvq2
> ### Title: Learning Vector Quantization 2.1
> ### Aliases: lvq2
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> cd <- lvqinit(train, cl, 10)
> lvqtest(cd, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c v c v c v c c v v v v v v v v v v v v v v v v v v v v v v v v v
Levels: c s v
> cd0 <- olvq1(train, cl, cd)
> lvqtest(cd0, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c c c c c c c c v v v v v v v v v v v v v v v v v v v v v v v c v
Levels: c s v
> cd2 <- lvq2(train, cl, cd0)
> lvqtest(cd2, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c c c c c c c c v v v v v v v v v v v v v v v v v v v v v v v c v
Levels: c s v
> 
> 
> 
> cleanEx(); nameEx("lvq3")
> ### * lvq3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lvq3
> ### Title: Learning Vector Quantization 3
> ### Aliases: lvq3
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> cd <- lvqinit(train, cl, 10)
> lvqtest(cd, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c v c v c v c c v v v v v v v v v v v v v v v v v v v v v v v v v
Levels: c s v
> cd0 <- olvq1(train, cl, cd)
> lvqtest(cd0, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c c c c c c c c v v v v v v v v v v v v v v v v v v v v v v v c v
Levels: c s v
> cd3 <- lvq3(train, cl, cd0)
> lvqtest(cd3, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c c c c c c c c v v v v v v v v v v v v v v v v v v v v v v v c v
Levels: c s v
> 
> 
> 
> cleanEx(); nameEx("lvqinit")
> ### * lvqinit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lvqinit
> ### Title: Initialize a LVQ Codebook
> ### Aliases: lvqinit
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> cd <- lvqinit(train, cl, 10)
> lvqtest(cd, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c v c v c v c c v v v v v v v v v v v v v v v v v v v v v v v v v
Levels: c s v
> cd1 <- olvq1(train, cl, cd)
> lvqtest(cd1, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c c c c c c c c v v v v v v v v v v v v v v v v v v v v v v v c v
Levels: c s v
> 
> 
> 
> cleanEx(); nameEx("lvqtest")
> ### * lvqtest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lvqtest
> ### Title: Classify Test Set from LVQ Codebook
> ### Aliases: lvqtest
> ### Keywords: classif
> 
> ### ** Examples
> 
> # The function is currently defined as
> function(codebk, test) knn1(codebk$x, test, codebk$cl)
function (codebk, test) 
knn1(codebk$x, test, codebk$cl)
> 
> 
> 
> cleanEx(); nameEx("multiedit")
> ### * multiedit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multiedit
> ### Title: Multiedit for k-NN Classifier
> ### Aliases: multiedit
> ### Keywords: classif
> 
> ### ** Examples
> 
> tr <- sample(1:50, 25)
> train <- rbind(iris3[tr,,1], iris3[tr,,2], iris3[tr,,3])
> test <- rbind(iris3[-tr,,1], iris3[-tr,,2], iris3[-tr,,3])
> cl <- factor(c(rep(1,25),rep(2,25), rep(3,25)), labels=c("s", "c", "v"))
> table(cl, knn(train, test, cl, 3))
   
cl   s  c  v
  s 25  0  0
  c  0 23  2
  v  0  1 24
> ind1 <- multiedit(train, cl, 3)
pass  1  size  70
pass  2  size  67
pass  3  size  65
pass  4  size  62
pass  5  size  61
pass  6  size  61
pass  7  size  59
pass  8  size  59
pass  9  size  59
pass  10  size  58
pass  11  size  58
pass  12  size  58
pass  13  size  58
pass  14  size  58
> length(ind1)
[1] 58
> table(cl, knn(train[ind1, , drop=FALSE], test, cl[ind1], 1))
   
cl   s  c  v
  s 25  0  0
  c  0 25  0
  v  0  2 23
> ntrain <- train[ind1,]; ncl <- cl[ind1]
> ind2 <- condense(ntrain, ncl)
[1] 15
[1] 15 26
[1] 15 26 50
> length(ind2)
[1] 3
> table(cl, knn(ntrain[ind2, , drop=FALSE], test, ncl[ind2], 1))
   
cl   s  c  v
  s 25  0  0
  c  0 25  0
  v  0  5 20
> 
> 
> 
> cleanEx(); nameEx("olvq1")
> ### * olvq1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: olvq1
> ### Title: Optimized Learning Vector Quantization 1
> ### Aliases: olvq1
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> cd <- lvqinit(train, cl, 10)
> lvqtest(cd, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c v c v c v c c v v v v v v v v v v v v v v v v v v v v v v v v v
Levels: c s v
> cd1 <- olvq1(train, cl, cd)
> lvqtest(cd1, train)
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c c c c c c
[39] c c c c c c c c c c c c v v v v v v v v v v v v v v v v v v v v v v v c v
Levels: c s v
> 
> 
> 
> cleanEx(); nameEx("reduce.nn")
> ### * reduce.nn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reduce.nn
> ### Title: Reduce Training Set for a k-NN Classifier
> ### Aliases: reduce.nn
> ### Keywords: classif
> 
> ### ** Examples
> 
> train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
> test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
> cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
> keep <- condense(train, cl)
[1] 20
[1] 20 44
[1] 20 44 65
[1] 20 44 65 74
[1] 20 28 44 65 74
[1] 20 28 44 65 73 74
[1] 20 28 44 65 73 74 75
[1] 20 28 44 48 65 73 74 75
[1] 20 28 44 46 48 65 73 74 75
 [1] 20 28 44 46 48 57 65 73 74 75
 [1] 20 28 35 44 46 48 57 65 73 74 75
 [1] 20 28 35 44 46 48 57 65 70 73 74 75
> knn(train[keep,], test, cl[keep])
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c v c c c c
[39] c c c c c c c c c c c c v v c v v v v v c v v v v c v v v v v v v v v v c
Levels: c s v
> keep2 <- reduce.nn(train, keep, cl)
> knn(train[keep2,], test, cl[keep2])
 [1] s s s s s s s s s s s s s s s s s s s s s s s s s c c c c c c c c v c c c c
[39] c c c c c c c c c c c c v v c v v v v v c v v v v c v v v v v v v v v v c
Levels: c s v
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.543 0.047 0.599 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
